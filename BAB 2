import 'dart:async';

// Enum untuk kategori produk
enum KategoriProduk { DataManagement, NetworkAutomation }

// Kelas ProdukDigital
class ProdukDigital {
  String namaProduk;
  double harga;
  KategoriProduk kategori;

  ProdukDigital(this.namaProduk, this.harga, this.kategori);

  // Metode untuk menerapkan diskon pada produk NetworkAutomation
  void terapkanDiskon() {
    if (kategori == KategoriProduk.NetworkAutomation) {
      double hargaDiskon = harga * 0.85;
      if (hargaDiskon >= 200000) {
        harga = hargaDiskon;
        print('Diskon diterapkan pada $namaProduk. Harga baru: $harga');
      } else {
        print('Diskon tidak diterapkan karena harga akan di bawah 200.000.');
      }
    }
  }
}

// Kelas abstrak Karyawan
abstract class Karyawan {
  String nama;
  int umur;
  String peran;

  Karyawan(this.nama, {required this.umur, required this.peran});

  // Metode abstrak bekerja
  void bekerja();
}

// Mixin Kinerja
mixin Kinerja {
  int _produktivitas = 0;

  int get produktivitas => _produktivitas;

  // Metode untuk memperbarui produktivitas setiap 30 hari
  void updateProduktivitas(int nilai) {
    if (nilai < 0 || nilai > 100) {
      print('Nilai produktivitas harus antara 0 hingga 100.');
      return;
    }
    _produktivitas = nilai;
    print('Produktivitas diperbarui menjadi $_produktivitas.');
  }

  // Validasi produktivitas Manager
  bool validasiManager() {
    return _produktivitas >= 85;
  }
}

// KaryawanTetap yang mengimplementasikan bekerja()
class KaryawanTetap extends Karyawan with Kinerja {
  KaryawanTetap(String nama, {required int umur, required String peran})
      : super(nama, umur: umur, peran: peran);

  @override
  void bekerja() {
    print('$nama (Karyawan Tetap) bekerja sebagai $peran.');
  }
}

// KaryawanKontrak yang mengimplementasikan bekerja()
class KaryawanKontrak extends Karyawan with Kinerja {
  KaryawanKontrak(String nama, {required int umur, required String peran})
      : super(nama, umur: umur, peran: peran);

  @override
  void bekerja() {
    print('$nama (Karyawan Kontrak) bekerja sebagai $peran.');
  }
}

// Enum FaseProyek
enum FaseProyek { Perencanaan, Pengembangan, Evaluasi }

// Kelas Proyek dengan kontrol fase proyek
class Proyek {
  String namaProyek;
  FaseProyek fase = FaseProyek.Perencanaan;
  List<Karyawan> timKaryawan = [];
  DateTime tanggalMulai;

  Proyek(this.namaProyek, this.tanggalMulai);

  // Metode untuk mengganti fase proyek dengan validasi
  void gantiFase(FaseProyek faseBaru) {
    if (faseBaru == FaseProyek.Pengembangan && timKaryawan.length < 5) {
      print('Minimal 5 karyawan aktif diperlukan untuk memulai fase Pengembangan.');
      return;
    }
    if (faseBaru == FaseProyek.Evaluasi &&
        DateTime.now().difference(tanggalMulai).inDays <= 45) {
      print('Proyek harus berjalan lebih dari 45 hari untuk masuk ke fase Evaluasi.');
      return;
    }

    fase = faseBaru;
    print('Proyek beralih ke fase: $fase');
  }
}

// Kelas Perusahaan untuk mengelola karyawan
class Perusahaan {
  List<Karyawan> karyawanAktif = [];
  List<Karyawan> karyawanNonAktif = [];
  static const int batasKaryawanAktif = 20;

  // Menambah karyawan baru
  void tambahKaryawan(Karyawan karyawan) {
    if (karyawanAktif.length >= batasKaryawanAktif) {
      print('Perusahaan penuh. Tidak dapat menambah karyawan baru.');
      return;
    }
    karyawanAktif.add(karyawan);
    print('${karyawan.nama} ditambahkan sebagai karyawan aktif.');
  }

  // Mengubah status karyawan menjadi non-aktif
  void resignKaryawan(Karyawan karyawan) {
    karyawanAktif.remove(karyawan);
    karyawanNonAktif.add(karyawan);
    print('${karyawan.nama} telah resign dan menjadi karyawan non-aktif.');
  }
}

// Fungsi utama
void main() {
  // Membuat produk
  var produk1 = ProdukDigital('Sistem Manajemen Data', 150000, KategoriProduk.DataManagement);
  var produk2 = ProdukDigital('Sistem Otomasi Jaringan', 250000, KategoriProduk.NetworkAutomation);
  produk2.terapkanDiskon();

  // Membuat karyawan
  var karyawan1 = KaryawanTetap('Alice', umur: 30, peran: 'Manager');
  var karyawan2 = KaryawanKontrak('Bob', umur: 25, peran: 'Developer');
  var karyawan3 = KaryawanTetap('Charlie', umur: 28, peran: 'Network Engineer');

  // Mengatur produktivitas karyawan
  karyawan1.updateProduktivitas(90);
  if (karyawan1.validasiManager()) {
    print('Produktivitas Manager ${karyawan1.nama} valid.');
  }

  // Membuat perusahaan
  var perusahaan = Perusahaan();
  perusahaan.tambahKaryawan(karyawan1);
  perusahaan.tambahKaryawan(karyawan2);
  perusahaan.tambahKaryawan(karyawan3);

  // Karyawan resign
  perusahaan.resignKaryawan(karyawan2);

  // Membuat proyek
  var proyek = Proyek('Implementasi Sistem', DateTime.now().subtract(Duration(days: 50)));
  proyek.timKaryawan.addAll([karyawan1, karyawan3]);
  proyek.gantiFase(FaseProyek.Pengembangan);
  proyek.gantiFase(FaseProyek.Evaluasi);
}
